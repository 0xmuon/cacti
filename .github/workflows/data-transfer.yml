# This is a basic workflow to help you get started with Actions

name: Data Transfer CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  start-fabric-network:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      # FABRIC NETWORK
      - name: Start Fabric Network
        run: make start-interop
        working-directory: tests/network-setups/fabric/dev
        
      # CORDA NETWORK
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
    
      - name: Generate github.properties
        run: |
          echo "Using ${GITHUB_ACTOR} user."
          echo "username=${GITHUB_ACTOR}" >> github.properties
          echo "password=${{ secrets.GITHUB_TOKEN }}" >> github.properties
          echo "url=https://maven.pkg.github.com/${GITHUB_ACTOR}/weaver-dlt-interoperability" >> github.properties
          cat github.properties
        working-directory: core/network/corda-interop-app
        
      # RELAY
      - name: Start Relay for network1
        run: make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.n1'
        working-directory: core/relay
      
      - name: Start Relay for network2
        run: make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.n2'
        working-directory: core/relay
        
#       - name: Start Relay for Corda_Network
#         run: make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.corda'
#         working-directory: core/relay
        
      # FABRIC DRIVER
      - name: Start Fabric Driver for network1
        run: make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.n1'
        working-directory: core/drivers/fabric-driver
      
      - name: Start Fabric Driver for network2
        run: make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.n2'
        working-directory: core/drivers/fabric-driver
        
      # FABRIC CLI
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Configure ALL
        run: ./bin/fabric-cli configure all network1 network2
        working-directory: samples/fabric/fabric-cli
      - name: Data Transfer Test 1
        run: |
          ./bin/fabric-cli interop --key=a --local-network=network2 --requesting-org=Org1MSP localhost:9080/network1/mychannel:simplestate:Read:a
          ./bin/fabric-cli chaincode query mychannel simplestate read '["a"]' --local-network=network2
        working-directory: samples/fabric/fabric-cli
      - name: Data Transfer Test 2
        run: |
          ./bin/fabric-cli interop --key=Arcturus --local-network=network1 --requesting-org=Org1MSP relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus
          ./bin/fabric-cli chaincode query mychannel simplestate read '["Arcturus"]' --local-network=network1
        working-directory: samples/fabric/fabric-cli
        
  setup-weaver:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # FABRIC DRIVER
      - name: Setup .env
        run: |
          sed -i "s#<PATH-TO-WEAVER>#${GITHUB_WORKSPACE}#g" docker-testnet-envs/.env.n1
          sed -i "s#<PATH-TO-WEAVER>#${GITHUB_WORKSPACE}#g" docker-testnet-envs/.env.n2
        working-directory: core/drivers/fabric-driver

      # RELAY
      - name: Edit docker compose
        run: make convert-compose-method2
        working-directory: core/relay
  
  setup-fabric-cli:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Setup .npmrc
        run: |
          cp .npmrc.template .npmrc
          sed -i "s/<personal-access-token>/${{ secrets.GITHUB_TOKEN }}/g" .npmrc
          cat .npmrc
        working-directory: samples/fabric/fabric-cli
      - name: Build CLI
        run: npm install
        working-directory: samples/fabric/fabric-cli
      - name: Setup CLI Config
        run: |
          echo ${GITHUB_WORKSPACE}
          cp config.template.json config.json
          sed -i "s#<PATH-TO-WEAVER>#${GITHUB_WORKSPACE}#g" config.json
        working-directory: samples/fabric/fabric-cli
      - name: Setup CLI ENV
        run: |
          echo ${GITHUB_WORKSPACE}
          cp .env.template .env
          ./bin/fabric-cli env set MEMBER_CREDENTIAL_FOLDER ${GITHUB_WORKSPACE}/samples/fabric/fabric-cli/src/data/credentials_docker
          ./bin/fabric-cli env set CONFIG_PATH ${GITHUB_WORKSPACE}/samples/fabric/fabric-cli/config.json
          cat .env
        working-directory: samples/fabric/fabric-cli
      
      
