# This is a basic workflow to help you get started with Actions

name: Data Transfer CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  data-transfer:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      # FABRIC NETWORK
      - name: Start Fabric Network
        run: make start-interop
        working-directory: tests/network-setups/fabric/dev
        
      # CORDA NETWORK
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
    
      - name: Generate github.properties
        run: |
          echo "Using ${GITHUB_ACTOR} user."
          echo "username=${GITHUB_ACTOR}" >> github.properties
          echo "password=${{ secrets.GITHUB_TOKEN }}" >> github.properties
          echo "url=https://maven.pkg.github.com/${GITHUB_ACTOR}/weaver-dlt-interoperability" >> github.properties
          cat github.properties
        working-directory: tests/network-setups/corda
        
      - name: Start Corda Network
        run: |
          sed -i "/docker logs corda_partya_1 -f/"' s/^/#/' "scripts/start-nodes.sh"
          make start
          echo "Waiting till corda network to start."
          sleep 60
          docker logs corda_partya_1
        working-directory: tests/network-setups/corda
        
      # RELAY
      - name: Edit docker compose
        run: make convert-compose-method2
        working-directory: core/relay
        
      - name: Start Relay for network1
        run: make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.n1'
        working-directory: core/relay
      
      - name: Start Relay for network2
        run: make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.n2'
        working-directory: core/relay
        
      - name: Start Relay for Corda_Network
        run: make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.corda'
        working-directory: core/relay
        
      # FABRIC DRIVER
      - name: Setup .env
        run: |
          sed -i "s#<PATH-TO-WEAVER>#${GITHUB_WORKSPACE}#g" docker-testnet-envs/.env.n1
          sed -i "s#<PATH-TO-WEAVER>#${GITHUB_WORKSPACE}#g" docker-testnet-envs/.env.n2
        working-directory: core/drivers/fabric-driver
        
      - name: Start Fabric Driver for network1
        run: make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.n1'
        working-directory: core/drivers/fabric-driver
      
      - name: Start Fabric Driver for network2
        run: make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.n2'
        working-directory: core/drivers/fabric-driver
        
      # CORDA DRIVER
      - name: Start Corda Driver
        run: make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.corda'
        working-directory: core/drivers/corda-driver
        
      # FABRIC CLI
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
          
      - name: Setup .npmrc
        run: |
          cp .npmrc.template .npmrc
          sed -i "s/<personal-access-token>/${{ secrets.GITHUB_TOKEN }}/g" .npmrc
          cat .npmrc
        working-directory: samples/fabric/fabric-cli
      - name: Build CLI
        run: npm install
        working-directory: samples/fabric/fabric-cli
      - name: Setup CLI Config
        run: |
          echo ${GITHUB_WORKSPACE}
          cp config.template.json config.json
          sed -i "s#<PATH-TO-WEAVER>#${GITHUB_WORKSPACE}#g" config.json
        working-directory: samples/fabric/fabric-cli
      - name: Setup CLI ENV
        run: |
          echo ${GITHUB_WORKSPACE}
          cp .env.template .env
          ./bin/fabric-cli env set MEMBER_CREDENTIAL_FOLDER ${GITHUB_WORKSPACE}/samples/fabric/fabric-cli/src/data/credentials_docker
          ./bin/fabric-cli env set CONFIG_PATH ${GITHUB_WORKSPACE}/samples/fabric/fabric-cli/config.json
          cat .env
        working-directory: samples/fabric/fabric-cli
        
      - name: Fabric CLI Configure ALL
        run: ./bin/fabric-cli configure all network1 network2
        working-directory: samples/fabric/fabric-cli
        
      # CORDA CLIENT
      - name: Corda CLI Initialize Vault
        run: make initialise-vault-docker
        working-directory: samples/corda/corda-simple-application
    
      - name: Data Transfer Corda Client Tests
        run: |
          COUNT=0
          TOTAL=4

          # CORDA - FABRIC1
          ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network1:9080/network1/mychannel:simplestate:Read:a
           > tmp.out
          tail -n 1 tmp.out | grep "SimpleState(key=a, value=Arcturus" && COUNT=$(( COUNT + 1 ))

          ./clients/build/install/clients/bin/clients get-state a > tmp.out
          tail -n 1 tmp.out | grep "SimpleState(key=a, value=Arcturus" && COUNT=$(( COUNT + 1 ))

          # CORDA - FABRIC2
          ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus > tmp.out
          tail -n 1 tmp.out | grep "SimpleState(key=Arcturus, value=17.671" && COUNT=$(( COUNT + 1 ))

          ./clients/build/install/clients/bin/clients get-state Arcturus > tmp.out
          tail -n 1 tmp.out | grep "SimpleState(key=Arcturus, value=17.671" && COUNT=$(( COUNT + 1 ))

          # RESULT
          echo "Passed $COUNT/$TOTAL Tests."

          if [ $COUNT == $TOTAL ]; then
              exit 0
          else
              exit 1
          fi
        working-directory: samples/corda/corda-simple-application
        
      # FABRIC CLI
      - name: Data Transfer Fabric CLI Testss
        run: |
          COUNT=0
          TOTAL=8

          # FABRIC2 - FABRIC1
          ./bin/fabric-cli interop --key=a --local-network=network2 --requesting-org=Org1MSP relay-network1:9080/network1/mychannel:simplestate:Read:a > tmp.out
          tail -n 1 tmp.out | grep "Called Function Create. With Args: a, Arcturus" && COUNT=$(( COUNT + 1 ))

          ./bin/fabric-cli chaincode query mychannel simplestate read '["a"]' --local-network=network2 > tmp.out
          tail -n 1 tmp.out | grep "Result from network query: Arcturus" && COUNT=$(( COUNT + 1 ))

          # FABRIC1 - FABRIC2
          ./bin/fabric-cli interop --key=Arcturus --local-network=network1 --requesting-org=Org1MSP relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus > tmp.out
          tail -n 1 tmp.out | grep "Called Function Create. With Args: Arcturus, 17.671" && COUNT=$(( COUNT + 1 ))

          ./bin/fabric-cli chaincode query mychannel simplestate read '["Arcturus"]' --local-network=network1 > tmp.out
          tail -n 1 tmp.out | grep "Result from network query: 17.671" && COUNT=$(( COUNT + 1 ))

          # FABRIC1 - CORDA
          ./bin/fabric-cli interop --key=H --local-network=network1 --sign=true --requesting-org=Org1MSP relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true > tmp.out
          tail -n 1 tmp.out | grep "Called Function Create. With Args: H, 1" && COUNT=$(( COUNT + 1 ))

          ./bin/fabric-cli chaincode query mychannel simplestate read '["H"]' --local-network=network1
          tail -n 1 tmp.out | grep "Result from network query: 1" && COUNT=$(( COUNT + 1 ))

          # FABRIC2 - CORDA
          ./bin/fabric-cli interop --key=H --local-network=network2 --sign=true --requesting-org=Org1MSP relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true > tmp.out
          tail -n 1 tmp.out | grep "Called Function Create. With Args: C, 20" && COUNT=$(( COUNT + 1 ))

          ./bin/fabric-cli chaincode query mychannel simplestate read '["C"]' --local-network=network2
          tail -n 1 tmp.out | grep "Result from network query: 20" && COUNT=$(( COUNT + 1 ))


          # RESULT
          echo "Passed $COUNT/$TOTAL Tests."

          if [ $COUNT == $TOTAL ]; then
              exit 0
          else
              exit 1
          fi
        working-directory: samples/fabric/fabric-cli
