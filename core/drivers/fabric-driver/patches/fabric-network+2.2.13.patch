diff --git a/node_modules/fabric-network/lib/transaction.d.ts b/node_modules/fabric-network/lib/transaction.d.ts
index 47ce1d1..3c65e83 100644
--- a/node_modules/fabric-network/lib/transaction.d.ts
+++ b/node_modules/fabric-network/lib/transaction.d.ts
@@ -100,7 +100,7 @@ export declare class Transaction {
      * @throws {module:fabric-network.TransactionError} If the transaction committed with an unsuccessful transaction
      * validation code, and so did not update the ledger.
      */
-    submit(...args: string[]): Promise<Buffer>;
+    submit(...args: string[]): Promise<Object>;
     /**
      * Evaluate a transaction function and return its results.
      * The transaction function will be evaluated on the endorsing peers but
diff --git a/node_modules/fabric-network/lib/transaction.js b/node_modules/fabric-network/lib/transaction.js
index 24e66f2..12dbb43 100644
--- a/node_modules/fabric-network/lib/transaction.js
+++ b/node_modules/fabric-network/lib/transaction.js
@@ -216,7 +216,7 @@ class Transaction {
         logger.debug('%s - build and send the endorsement', method);
         // build the outbound request along with getting a new transactionId
         // from the identity context
-        endorsement.build(this.identityContext, proposalBuildRequest);
+        const proposal = endorsement.build(this.identityContext, proposalBuildRequest);
         endorsement.sign(this.identityContext);
         // ------- S E N D   P R O P O S A L
         // This is where the request gets sent to the peers
@@ -288,7 +288,8 @@ class Transaction {
             }
             logger.debug('%s - wait for the transaction to be committed on the peer', method);
             await eventHandler.waitForEvents();
-            return result;
+            // need this dummy comment line for the patch to work
+            return {result, proposalResponse: proposalResponse.responses, proposal: proposal} ;
         }
         catch (err) {
             err.responses = proposalResponse.responses;
